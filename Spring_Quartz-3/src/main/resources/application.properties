
#============================================================================
# Configure Main Scheduler Properties 调度器属性
#============================================================================
#属性用来区分特定的调度器实例，可以按照功能用途来给调度器起名
org.quartz.scheduler.instanceName = MyScheduler
#属性和前者一样，也允许任何字符串，但这个值必须是在所有调度器实例中是惟一的，
#尤其是在一个集群当中，作为集群的唯一key。
#假如你想Quartz帮你生成这个值的话，可以设置为AUTO。
#与上面那个属性的区别主要是，instanceId主要是指物理上的区分，而instanceName是逻辑上的区分。
org.quartz.scheduler.instanceId = AUTO
org.quartz.scheduler.skipUpdateCheck = true

#============================================================================
# Configure ThreadPool 线程池属性
#============================================================================
#线程池的实现类（一般使用SimpleThreadPool即可满足几乎所有用户的需求）
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
#属性设置Quartz工作线程数量，最小值为1，无最大值，
#但是最好不超过100，不然服务器性能会大大下降。
org.quartz.threadPool.threadCount = 25
#属性设置线程优先级，最小值1，最大值10，
#一般情况下设置为5，默认值也是5。主要用在集群中设置。
org.quartz.threadPool.threadPriority = 5
#============================================================================
# Configure JobStore 存储调度信息（工作，触发器和日历等）
#============================================================================
org.quartz.jobStore.misfireThreshold = 1000
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
org.quartz.jobStore.useProperties = false
org.quartz.jobStore.dataSource = myDS
org.quartz.jobStore.tablePrefix = qrtz_
org.quartz.jobStore.isClustered = false
#============================================================================
# Configure Datasources
#============================================================================
org.quartz.dataSource.myDS.driver = org.postgresql.Driver
org.quartz.dataSource.myDS.URL = jdbc:postgresql://localhost:5432/quartz
org.quartz.dataSource.myDS.user = ccbs
org.quartz.dataSource.myDS.password = ccbs
org.quartz.dataSource.myDS.maxConnections = 200
org.quartz.dataSource.myDS.validationQuery=select 1
