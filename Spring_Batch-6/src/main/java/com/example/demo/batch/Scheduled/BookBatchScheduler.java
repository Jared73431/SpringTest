package com.example.demo.batch.Scheduled;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.JobExecution;
import org.springframework.batch.core.JobExecutionException;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;
import org.springframework.batch.core.launch.JobLauncher;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.scheduling.annotation.Scheduled;

import lombok.extern.log4j.Log4j2;

/**
 * Êõ∏Á±çÊâπÊ¨°‰ΩúÊ•≠ÊéíÁ®ãÂô®
 * Êèê‰æõ‰∏çÂêåÊôÇÈñìÈñìÈöîÁöÑÊéíÁ®ã‰ªªÂãôÔºåÊºîÁ§∫‰∏âÁ®Æ‰∏çÂêåÁöÑËÆÄÂèñÂô®ÊñπÂºè
 */
@Log4j2
@Configuration
@EnableScheduling
public class BookBatchScheduler {

    private final JobLauncher jobLauncher;
    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    @Autowired
    @Qualifier("bookRepositoryJob")
    private Job bookRepositoryJob;

    @Autowired
    @Qualifier("bookJpaJob")
    private Job bookJpaJob;

    @Autowired
    @Qualifier("bookJdbcJob")
    private Job bookJdbcJob;

    @Autowired
    @Qualifier("bookComprehensiveJob")
    private Job bookComprehensiveJob;

    @Autowired
    @Qualifier("bookConditionalJob")
    private Job bookConditionalJob;

    public BookBatchScheduler(JobLauncher jobLauncher) {
        this.jobLauncher = jobLauncher;
    }

    /**
     * Repository ËÆÄÂèñÂô®‰ΩúÊ•≠ - ÊØè 10 ÂàÜÈêòÂü∑Ë°å‰∏ÄÊ¨°
     * ÈÅ©ÂêàÔºöÂ∏∏Ë¶èÊï∏ÊìöÂêåÊ≠•ÔºåÁ∞°ÂñÆÊü•Ë©¢Â†¥ÊôØ
     */
    @Scheduled(fixedRate = 600000) // 10ÂàÜÈêò = 600000ÊØ´Áßí
    public void runBookRepositoryJob() {
        try {
            JobParameters params = createJobParameters("REPOSITORY_SCHEDULED");

            log.info("üöÄ Starting Repository Job at {}", LocalDateTime.now().format(formatter));
            JobExecution jobExecution = jobLauncher.run(bookRepositoryJob, params);

            log.info("üìä Repository Job Result: {} (ID: {})",
                    jobExecution.getStatus(), jobExecution.getJobId());

        } catch (JobExecutionException e) {
            log.error("‚ùå Repository Job execution failed: {}", e.getMessage(), e);
        }
    }

    /**
     * JPA ÂàÜÈ†ÅËÆÄÂèñÂô®‰ΩúÊ•≠ - ÊØè 15 ÂàÜÈêòÂü∑Ë°å‰∏ÄÊ¨°
     * ÈÅ©ÂêàÔºö‰∏≠Á≠âË§áÈõúÂ∫¶Êü•Ë©¢ÔºåÈúÄË¶ÅÂèÉÊï∏ÂåñÊü•Ë©¢ÁöÑÂ†¥ÊôØ
     */
    @Scheduled(fixedRate = 900000) // 15ÂàÜÈêò = 900000ÊØ´Áßí
    public void runBookJpaJob() {
        try {
            JobParameters params = createJobParameters("JPA_SCHEDULED");

            log.info("üöÄ Starting JPA Job at {}", LocalDateTime.now().format(formatter));
            JobExecution jobExecution = jobLauncher.run(bookJpaJob, params);

            log.info("üìä JPA Job Result: {} (ID: {})",
                    jobExecution.getStatus(), jobExecution.getJobId());

        } catch (JobExecutionException e) {
            log.error("‚ùå JPA Job execution failed: {}", e.getMessage(), e);
        }
    }

    /**
     * JDBC Ê∏∏Ê®ôËÆÄÂèñÂô®‰ΩúÊ•≠ - ÊØè 20 ÂàÜÈêòÂü∑Ë°å‰∏ÄÊ¨°
     * ÈÅ©ÂêàÔºöÂ§ßÊï∏ÊìöÈáèËôïÁêÜÔºåÊÄßËÉΩË¶ÅÊ±ÇÈ´òÁöÑÂ†¥ÊôØ
     */
    @Scheduled(fixedRate = 1200000) // 20ÂàÜÈêò = 1200000ÊØ´Áßí
    public void runBookJdbcJob() {
        try {
            JobParameters params = createJobParameters("JDBC_SCHEDULED");

            log.info("üöÄ Starting JDBC Job at {}", LocalDateTime.now().format(formatter));
            JobExecution jobExecution = jobLauncher.run(bookJdbcJob, params);

            log.info("üìä JDBC Job Result: {} (ID: {})",
                    jobExecution.getStatus(), jobExecution.getJobId());

        } catch (JobExecutionException e) {
            log.error("‚ùå JDBC Job execution failed: {}", e.getMessage(), e);
        }
    }

    /**
     * Á∂úÂêà‰ΩúÊ•≠ - ÊØèÂ∞èÊôÇÂü∑Ë°å‰∏ÄÊ¨°
     * ÂåÖÂê´Â§öÂÄãÊ≠•È©üÁöÑÂÆåÊï¥Êï∏ÊìöËôïÁêÜÊµÅÁ®ã
     */
    @Scheduled(fixedRate = 3600000) // 1Â∞èÊôÇ = 3600000ÊØ´Áßí
    public void runBookComprehensiveJob() {
        try {
            JobParameters params = createJobParameters("COMPREHENSIVE_SCHEDULED");

            log.info("üöÄ Starting Comprehensive Job at {}", LocalDateTime.now().format(formatter));
            JobExecution jobExecution = jobLauncher.run(bookComprehensiveJob, params);

            log.info("üìä Comprehensive Job Result: {} (ID: {})",
                    jobExecution.getStatus(), jobExecution.getJobId());

        } catch (JobExecutionException e) {
            log.error("‚ùå Comprehensive Job execution failed: {}", e.getMessage(), e);
        }
    }

    /**
     * Ê¢ù‰ª∂‰ΩúÊ•≠ - ÊØè 30 ÂàÜÈêòÂü∑Ë°å‰∏ÄÊ¨°
     * Ê†πÊìöÊ¢ù‰ª∂Âü∑Ë°å‰∏çÂêåÁöÑËôïÁêÜÈÇèËºØ
     */
    @Scheduled(fixedRate = 1800000) // 30ÂàÜÈêò = 1800000ÊØ´Áßí
    public void runBookConditionalJob() {
        try {
            JobParameters params = createJobParameters("CONDITIONAL_SCHEDULED");

            log.info("üöÄ Starting Conditional Job at {}", LocalDateTime.now().format(formatter));
            JobExecution jobExecution = jobLauncher.run(bookConditionalJob, params);

            log.info("üìä Conditional Job Result: {} (ID: {})",
                    jobExecution.getStatus(), jobExecution.getJobId());

        } catch (JobExecutionException e) {
            log.error("‚ùå Conditional Job execution failed: {}", e.getMessage(), e);
        }
    }

    /**
     * ÊØèÊó•ÂÆåÊï¥Â†±Âëä‰ΩúÊ•≠ - ÊØèÂ§©ÂáåÊô® 2 ÈªûÂü∑Ë°å
     * ÁîüÊàêÂÆåÊï¥ÁöÑÊï∏ÊìöËôïÁêÜÂ†±Âëä
     */
    @Scheduled(cron = "0 0 2 * * ?") // ÊØèÂ§©ÂáåÊô® 2:00
    public void runDailyReportJob() {
        try {
            JobParameters params = createJobParameters("DAILY_REPORT");

            log.info("üåô Starting Daily Report Job at {}", LocalDateTime.now().format(formatter));

            // È†ÜÂ∫èÂü∑Ë°åÊâÄÊúâ‰ΩúÊ•≠‰ª•ÁîüÊàêÂÆåÊï¥Â†±Âëä
            log.info("üìã Executing Repository Job...");
            jobLauncher.run(bookRepositoryJob, params);

            Thread.sleep(30000); // Á≠âÂæÖ 30 Áßí

            log.info("üìã Executing JPA Job...");
            jobLauncher.run(bookJpaJob, createJobParameters("DAILY_REPORT_JPA"));

            Thread.sleep(30000); // Á≠âÂæÖ 30 Áßí

            log.info("üìã Executing JDBC Job...");
            JobExecution finalJob = jobLauncher.run(bookJdbcJob, createJobParameters("DAILY_REPORT_JDBC"));

            log.info("üåÖ Daily Report Completed: {}", finalJob.getStatus());

        } catch (Exception e) {
            log.error("‚ùå Daily Report Job execution failed: {}", e.getMessage(), e);
        }
    }

    /**
     * ÊØèÈÄ±Êï∏ÊìöÊ∏ÖÁêÜ‰ΩúÊ•≠ - ÊØèÈÄ±‰∏ÄÂáåÊô® 1 ÈªûÂü∑Ë°å
     * Âü∑Ë°åÊï∏ÊìöÁ∂≠Ë≠∑ÂíåÊ∏ÖÁêÜ‰ªªÂãô
     */
    @Scheduled(cron = "0 0 1 * * MON") // ÊØèÈÄ±‰∏ÄÂáåÊô® 1:00
    public void runWeeklyMaintenanceJob() {
        try {
            JobParameters params = createJobParameters("WEEKLY_MAINTENANCE");

            log.info("üßπ Starting Weekly Maintenance Job at {}", LocalDateTime.now().format(formatter));
            JobExecution jobExecution = jobLauncher.run(bookComprehensiveJob, params);

            log.info("üßπ Weekly Maintenance Result: {} (ID: {})",
                    jobExecution.getStatus(), jobExecution.getJobId());

        } catch (JobExecutionException e) {
            log.error("‚ùå Weekly Maintenance Job execution failed: {}", e.getMessage(), e);
        }
    }

    /**
     * ÂâµÂª∫‰ΩúÊ•≠ÂèÉÊï∏
     */
    private JobParameters createJobParameters(String executionType) {
        return new JobParametersBuilder()
                .addLong("timestamp", System.currentTimeMillis())
                .addString("executionType", executionType)
                .addString("scheduledTime", LocalDateTime.now().format(formatter))
                .addString("jobId", "BOOK_BATCH_" + System.currentTimeMillis())
                .toJobParameters();
    }

    /**
     * ÊâãÂãïËß∏Áôº‰ΩúÊ•≠ÁöÑÊñπÊ≥ï - ÂèØÈÄöÈÅé REST API Ë™øÁî®
     */
    public String triggerJobManually(String jobType) {
        try {
            JobParameters params = createJobParameters("MANUAL_TRIGGER");
            Job jobToRun;

            switch (jobType.toUpperCase()) {
                case "REPOSITORY" -> jobToRun = bookRepositoryJob;
                case "JPA" -> jobToRun = bookJpaJob;
                case "JDBC" -> jobToRun = bookJdbcJob;
                case "COMPREHENSIVE" -> jobToRun = bookComprehensiveJob;
                case "CONDITIONAL" -> jobToRun = bookConditionalJob;
                default -> {
                    return "‚ùå Unknown job type: " + jobType;
                }
            }

            log.info("üéØ Manually triggering {} job", jobType);
            JobExecution jobExecution = jobLauncher.run(jobToRun, params);

            return String.format("‚úÖ Job %s triggered successfully. Status: %s, ID: %d",
                    jobType, jobExecution.getStatus(), jobExecution.getJobId());

        } catch (JobExecutionException e) {
            log.error("‚ùå Manual job trigger failed: {}", e.getMessage(), e);
            return "‚ùå Job execution failed: " + e.getMessage();
        }
    }
}
